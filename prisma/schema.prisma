generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sign {
  id     Int @id @default(autoincrement())
  sign String @db.VarChar(20)

  User User[]

  @@map("signs")
}

model SocialStatus {
  id     Int @id @default(autoincrement())
  status String @db.VarChar(20)

  User User[]

  @@map("social_status")
}

model Drinking {
  id     Int @id @default(autoincrement())
  option String @db.VarChar(15)

  User User[]

  @@map("drinking")
}

model User {
  id             String        @id @default(uuid())
  firstName      String        @map("first_name") @db.VarChar(20)
  lastName       String        @map("last_name") @db.VarChar(30)
  username       String        @unique @db.VarChar(20)
  email          String        @unique @db.VarChar(50)
  password       String        @db.VarChar(200)
  imageUrl       String?       @map("image_url") @db.VarChar(500)
  socialStatus   SocialStatus? @relation(fields: [socialStatusId], references: [id])
  socialStatusId Int?       @map("social_status_id") @default(1)
  children       Boolean?
  smokes         Boolean?
  drinking       Drinking?     @relation(fields: [drinkingId], references: [id])
  drinkingId     Int?       @map("drinking_id") @default(1)
  sign           Sign?         @relation(fields: [signId], references: [id])
  signId         Int?       @map("sign_id") @default(1)
  biography      String?       @db.VarChar(300)
  active         Boolean       @default(true)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @default(now()) @map("updated_name")

  Post Post[]
  friends Friend[] @relation("user")
  invites Friend[] @relation("friend")

  @@map("users")
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(300)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @map("author_id")
  mediaUrl  String?  @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("posts")
}

model Friend {
  user User @relation("user", fields: [userId], references: [id])
  userId String
  friend User @relation("friend", fields: [friendId], references: [id])
  friendId String
  status String @db.VarChar(200)@default("pending")

  @@id([userId, friendId])
  @@map("friends")
}
